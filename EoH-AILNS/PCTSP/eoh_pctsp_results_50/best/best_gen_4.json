{
  "algorithm": "Modified version of: Modified version of: Initial PCTSP repair operator generated from scratch",
  "code": "def llm_repair(state: 'PCTSPSolution', rng, **kwargs) -> 'PCTSPSolution':\n    \"\"\"\n    Repair operator for the Price Collecting Travelling Salesman Problem (PCTSP) using ALNS.\n    \"\"\"\n    unvisited = state.unvisited[:]\n\n    # Sort unvisited nodes by a combination of prize-to-penalty ratio and distance to tour\n    def sorting_key(node):\n        closest_dist = float('inf')\n        if state.tour:\n            for tour_node in state.tour:\n                dist = np.linalg.norm(DATA.locations[node] - DATA.locations[tour_node])\n                closest_dist = min(closest_dist, dist)\n        else:\n            closest_dist = np.linalg.norm(DATA.locations[node] - DATA.depot)\n        return DATA.prizes[node] / (DATA.penalties[node] + 0.0001) - 0.01 * closest_dist #Adding small constant to penalty to avoid division by zero, scaling distance to prioritize high prize-to-penalty\n\n    unvisited.sort(key=sorting_key, reverse=True)\n\n    for node in unvisited:\n        state.opt_insert(node)\n    \n    # Ensure feasibility\n    while not state.is_feasible():\n        # Prioritize removing nodes with low prize and high cost of insertion\n        worst_node = None\n        worst_metric = float('inf')\n        for node in state.tour:\n            prize = DATA.prizes[node]\n            \n            # Estimate insertion cost (more accurate)\n            idx = state.tour.index(node)\n            if len(state.tour) > 1:\n                prev_node = state.tour[idx - 1] if idx > 0 else state.tour[-1]\n                next_node = state.tour[idx + 1] if idx < len(state.tour) - 1 else state.tour[0]\n                cost = np.linalg.norm(DATA.locations[node] - DATA.locations[prev_node]) + \\\n                       np.linalg.norm(DATA.locations[node] - DATA.locations[next_node]) - \\\n                       np.linalg.norm(DATA.locations[prev_node] - DATA.locations[next_node])\n            else:\n                cost = 2 * np.linalg.norm(DATA.locations[node] - DATA.depot)\n            \n            # Metric: low prize, high insertion cost\n            metric = (cost + 0.0001) / (prize + 0.0001) # adding small constant to avoid division by zero\n\n            if metric < worst_metric:\n                worst_metric = metric\n                worst_node = node\n                \n        if worst_node is not None:\n            state.remove(worst_node)\n            state.unvisited.append(worst_node)\n            \n    # Adaptive node swapping based on potential gain\n    num_swaps = min(len(state.tour), len(state.unvisited), 5) # Limit swaps for speed\n    for _ in range(num_swaps):\n        best_gain = 0\n        best_swap = None\n\n        for i in range(len(state.tour)):\n            for j in range(len(state.unvisited)):\n                node_in = state.unvisited[j]\n                node_out = state.tour[i]\n\n                # Evaluate the potential gain from swapping\n                prize_diff = DATA.prizes[node_in] - DATA.prizes[node_out]\n                penalty_diff = DATA.penalties[node_out] - DATA.penalties[node_in]\n\n                # More accurate cost estimation\n                idx = state.tour.index(node_out)\n                if len(state.tour) > 1:\n                    prev_node = state.tour[idx - 1] if idx > 0 else state.tour[-1]\n                    next_node = state.tour[idx + 1] if idx < len(state.tour) - 1 else state.tour[0]\n\n                    cost_diff = (np.linalg.norm(DATA.locations[node_in] - DATA.locations[prev_node]) +\n                                 np.linalg.norm(DATA.locations[node_in] - DATA.locations[next_node]) -\n                                 np.linalg.norm(DATA.locations[node_out] - DATA.locations[prev_node]) -\n                                 np.linalg.norm(DATA.locations[node_out] - DATA.locations[next_node]))\n                else:\n                    cost_diff = (2 * np.linalg.norm(DATA.locations[node_in] - DATA.depot) -\n                                 2 * np.linalg.norm(DATA.locations[node_out] - DATA.depot))\n\n                gain = prize_diff - penalty_diff - cost_diff\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_swap = (i, j)\n\n        if best_swap is not None and best_gain > 0:\n            i, j = best_swap\n            node_in = state.unvisited[j]\n            node_out = state.tour[i]\n            \n            state.remove(node_out)\n            state.unvisited.append(node_out)\n            state.insert(node_in, i)  # insert at the same location that the node was removed from\n            state.unvisited.remove(node_in)\n        else:\n            break\n\n    return state",
  "objective": 11.793883517001941,
  "gap": -20.436714250366457,
  "runtime": 60.045737981796265,
  "timestamp": "2025-06-13 14:31:33",
  "feasible": true,
  "instance1_objective": 5.9850375363823956,
  "instance2_objective": 5.808845980619546,
  "instance1_gap": -25.5168829827322,
  "instance2_gap": -15.356545518000717,
  "instance1_feasible": true,
  "instance2_feasible": true,
  "tour_length": 100,
  "prize_collected": 3.6335959601441985,
  "strategy": "m1",
  "generation": 3
}