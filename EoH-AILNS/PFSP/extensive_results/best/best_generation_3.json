{
  "algorithm": "Modified version of: Initial PFSP repair operator generated from scratch",
  "code": "def llm_repair(state, rng, **kwargs):\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    Inserts the unassigned jobs back into the solution in a smart way to minimize the makespan.\n    \"\"\"\n    unassigned_jobs = state.unassigned[:]  # Copy the list to avoid modifying the original\n    \n    # Attempt to sort unassigned jobs based on a heuristic before insertion\n    # Prioritize jobs that have a high average processing time.\n    avg_processing_times = [np.mean(DATA.processing_times[:, job]) for job in unassigned_jobs]\n    sorted_indices = np.argsort(avg_processing_times)[::-1]\n    sorted_unassigned_jobs = [unassigned_jobs[i] for i in sorted_indices]\n\n    for job in sorted_unassigned_jobs:\n        state.opt_insert(job)\n\n    state.unassigned = []  # Clear the unassigned list after inserting all jobs\n\n    # Perform a local search (insertion neighborhood) to further improve the solution\n    schedule = state.schedule[:]\n    best_schedule = schedule[:]\n    best_makespan = state.objective()\n\n    for i in range(len(schedule)):\n        for j in range(len(schedule)):\n            if i == j:\n                continue\n\n            # Move job at index i to index j\n            temp_schedule = schedule[:]\n            job_to_move = temp_schedule.pop(i)\n            temp_schedule.insert(j, job_to_move)\n            \n            makespan = compute_makespan(temp_schedule)\n\n            if makespan < best_makespan:\n                best_makespan = makespan\n                best_schedule = temp_schedule[:]\n    \n    state.schedule = best_schedule\n    return state",
  "objective": 3923,
  "gap": 1.238709677419355,
  "runtime": 486.02517914772034,
  "timestamp": "2025-05-23 16:31:00",
  "feasible": true,
  "strategy": "m1",
  "generation": 3
}