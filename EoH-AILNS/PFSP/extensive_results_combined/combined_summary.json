{
  "timestamp": "2025-06-14 12:53:28",
  "total_runtime_minutes": 65.23087702989578,
  "total_operators": 15,
  "best_overall": {
    "problem": "small",
    "objective": 2995
  },
  "results_by_problem": [
    {
      "problem_name": "small",
      "problem_description": "Small Problems (20\u00d710)",
      "data_file": "data/j20_m10/j20_m10_01.txt",
      "output_dir": "extensive_results_small",
      "runtime_minutes": 21.590025548140208,
      "best_objective": 2995,
      "final_population": [
        {
          "algorithm": "Initial PFSP repair operator generated from scratch",
          "code": "def llm_repair(state: Solution, rng, **kwargs) -> Solution:\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    Inserts the unassigned jobs back into the solution in a smart way to minimize the makespan.\n    \"\"\"\n\n    unassigned_jobs = state.unassigned.copy()\n    rng.shuffle(unassigned_jobs)  # Shuffle for a bit of randomness\n\n    for job in unassigned_jobs:\n        state.opt_insert(job)\n\n    state.unassigned = []  # Clear unassigned jobs after insertion\n\n    return state",
          "objective": 2995,
          "gap": null,
          "runtime": 60.00116515159607,
          "timestamp": "2025-06-14 11:48:15",
          "feasible": true,
          "training_instances": [
            "training_data/j20_m10/j20_m10_1.txt",
            "training_data/j20_m10/j20_m10_2.txt"
          ],
          "training_evaluation": {
            "total_objective": 