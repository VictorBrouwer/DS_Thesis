{
  "generation": 0,
  "timestamp": "2025-06-14 11:53:21",
  "problem_file": "data/j20_m10/j20_m10_01.txt",
  "best_known_value": 1582,
  "population_size": 5,
  "population": [
    {
      "algorithm": "Initial PFSP repair operator generated from scratch",
      "code": "def llm_repair(state: Solution, rng, **kwargs) -> Solution:\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    Inserts the unassigned jobs back into the solution in a smart way to minimize the makespan.\n    \"\"\"\n\n    unassigned_jobs = state.unassigned.copy()\n    rng.shuffle(unassigned_jobs)  # Shuffle for a bit of randomness\n\n    for job in unassigned_jobs:\n        state.opt_insert(job)\n\n    state.unassigned = []  # Clear unassigned jobs after insertion\n\n    return state",
      "objective": 2995,
      "gap": null,
      "runtime": 60.00116515159607,
      "timestamp": "2025-06-14 11:48:15",
      "feasible": true,
      "training_instances": [
        "training_data/j20_m10/j20_m10_1.txt",
        "training_data/j20_m10/j20_m10_2.txt"
      ],
      "training_evaluation": {
        "total_objective": 2995,
        "average_objective": 1497.5,
        "total_runtime": 60.00116515159607,
        "average_runtime": 30.000582575798035,
        "instance_results": [
          {
            "objective": 1461,
            "runtime": 30.000903129577637,
            "data_file": "training_data/j20_m10/j20_m10_1.txt",
            "iterations": 0
          },
          {
            "objective": 1534,
            "runtime": 30.000262022018433,
            "data_file": "training_data/j20_m10/j20_m10_2.txt",
            "iterations": 0
          }
        ],
        "n_instances": 2
      }
    },
    {
      "algorithm": "Initial PFSP repair operator generated from scratch",
      "code": "def llm_repair(state: Solution, rng, **kwargs) -> Solution:\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    Args:\n        state: The current solution.\n        rng: A numpy.random.Generator object for random operations.\n        **kwargs: Additional keyword arguments.\n\n    Returns:\n        The repaired solution.\n    \"\"\"\n\n    unassigned_jobs = state.unassigned[:]  # Create a copy to avoid modifying the original list\n    rng.shuffle(unassigned_jobs)  # Randomize the order of unassigned jobs\n\n    for job in unassigned_jobs:\n        state.opt_insert(job)\n\n    state.unassigned = []  # All jobs are now assigned\n    return state",
      "objective": 2995,
      "gap": null,
      "runtime": 60.00176429748535,
      "timestamp": "2025-06-14 11:52:21",
      "feasible": true,
      "training_instances": [
        "training_data/j20_m10/j20_m10_1.txt",
        "training_data/j20_m10/j20_m10_2.txt"
      ],
      "training_evaluation": {
        "total_objective": 2995,
        "average_objective": 1497.5,
        "total_runtime": 60.00176429748535,
        "average_runtime": 30.000882148742676,
        "instance_results": [
          {
            "objective": 1461,
            "runtime": 30.000747203826904,
            "data_file": "training_data/j20_m10/j20_m10_1.txt",
            "iterations": 0
          },
          {
            "objective": 1534,
            "runtime": 30.001017093658447,
            "data_file": "training_data/j20_m10/j20_m10_2.txt",
            "iterations": 0
          }
        ],
        "n_instances": 2
      }
    },
    {
      "algorithm": "Initial PFSP repair operator generated from scratch",
      "code": "def llm_repair(state, rng, **kwargs):\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    Args:\n        state (Solution): The current solution.\n        rng (numpy.random.Generator): Random number generator.\n\n    Returns:\n        Solution: The repaired solution.\n    \"\"\"\n\n    unassigned_jobs = state.unassigned[:]  # Create a copy to avoid modifying the original\n\n    while unassigned_jobs:\n        job = unassigned_jobs.pop(rng.integers(len(unassigned_jobs)))  # Randomly select a job to insert\n        state.opt_insert(job)  # Insert the job at its best position\n\n    return state",
      "objective": 3156,
      "gap": null,
      "runtime": 60.0033278465271,
      "timestamp": "2025-06-14 11:49:16",
      "feasible": true,
      "training_instances": [
        "training_data/j20_m10/j20_m10_1.txt",
        "training_data/j20_m10/j20_m10_2.txt"
      ],
      "training_evaluation": {
        "total_objective": 3156,
        "average_objective": 1578.0,
        "total_runtime": 60.0033278465271,
        "average_runtime": 30.00166392326355,
        "instance_results": [
          {
            "objective": 1544,
            "runtime": 30.0004620552063,
            "data_file": "training_data/j20_m10/j20_m10_1.txt",
            "iterations": 0
          },
          {
            "objective": 1612,
            "runtime": 30.0028657913208,
            "data_file": "training_data/j20_m10/j20_m10_2.txt",
            "iterations": 0
          }
        ],
        "n_instances": 2
      }
    },
    {
      "algorithm": "Initial PFSP repair operator generated from scratch",
      "code": "def llm_repair(state: Solution, rng, **kwargs) -> Solution:\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n    Inserts the unassigned jobs back into the solution in a smart way,\n    trying to minimize the makespan.\n    \"\"\"\n    \n    unassigned_jobs = state.unassigned.copy()\n    \n    # First, sort unassigned jobs based on their total processing time (descending)\n    # This is a greedy approach to prioritize jobs with longer processing times\n    job_processing_times = [np.sum(DATA.processing_times[:, job]) for job in unassigned_jobs]\n    sorted_job_indices = np.argsort(job_processing_times)[::-1]\n    sorted_unassigned_jobs = [unassigned_jobs[i] for i in sorted_job_indices]\n    \n    # Iteratively insert jobs back into the solution at their best possible location\n    for job in sorted_unassigned_jobs:\n        state.opt_insert(job)\n    \n    return state",
      "objective": 3156,
      "gap": null,
      "runtime": 60.00497794151306,
      "timestamp": "2025-06-14 11:51:20",
      "feasible": true,
      "training_instances": [
        "training_data/j20_m10/j20_m10_1.txt",
        "training_data/j20_m10/j20_m10_2.txt"
      ],
      "training_evaluation": {
        "total_objective": 3156,
        "average_objective": 1578.0,
        "total_runtime": 60.00497794151306,
        "average_runtime": 30.00248897075653,
        "instance_results": [
          {
            "objective": 1544,
            "runtime": 30.00275683403015,
            "data_file": "training_data/j20_m10/j20_m10_1.txt",
            "iterations": 0
          },
          {
            "objective": 1612,
            "runtime": 30.00222110748291,
            "data_file": "training_data/j20_m10/j20_m10_2.txt",
            "iterations": 0
          }
        ],
        "n_instances": 2
      }
    },
    {
      "algorithm": "Initial PFSP repair operator generated from scratch",
      "code": "def llm_repair(state, rng, **kwargs):\n    \"\"\"\n    Repair operator for the Permutation Flow Shop Problem (PFSP) using ALNS.\n\n    This operator inserts unassigned jobs back into the solution in a smart way,\n    trying to minimize the makespan.\n\n    Args:\n        state: The current Solution object.\n        rng: A numpy.random.Generator object for random operations.\n        **kwargs: Additional keyword arguments (not used).\n\n    Returns:\n        The modified Solution object.\n    \"\"\"\n\n    unassigned_jobs = state.unassigned[:]\n    \n    # Sort unassigned jobs by a simple heuristic: total processing time\n    processing_times_sums = [np.sum(DATA.processing_times[:, job]) for job in unassigned_jobs]\n    sorted_indices = np.argsort(processing_times_sums)\n    sorted_unassigned_jobs = [unassigned_jobs[i] for i in sorted_indices]\n\n    # Insert the unassigned jobs back into the solution, one by one using optimal insertion\n    for job in sorted_unassigned_jobs:\n        state.opt_insert(job)\n\n    return state",
      "objective": 3157,
      "gap": null,
      "runtime": 60.00373888015747,
      "timestamp": "2025-06-14 11:50:18",
      "feasible": true,
      "training_instances": [
        "training_data/j20_m10/j20_m10_1.txt",
        "training_data/j20_m10/j20_m10_2.txt"
      ],
      "training_evaluation": {
        "total_objective": 3157,
        "average_objective": 1578.5,
        "total_runtime": 60.00373888015747,
        "average_runtime": 30.001869440078735,
        "instance_results": [
          {
            "objective": 1544,
            "runtime": 30.001572847366333,
            "data_file": "training_data/j20_m10/j20_m10_1.txt",
            "iterations": 0
          },
          {
            "objective": 1613,
            "runtime": 30.002166032791138,
            "data_file": "training_data/j20_m10/j20_m10_2.txt",
            "iterations": 0
          }
        ],
        "n_instances": 2
      }
    }
  ]
}